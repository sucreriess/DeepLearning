import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

import numpy as np

# 1. Data Preparation

# Load the dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize the images to the range [0, 1]
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255


# Flatten the images to 1D vectors of size 784 (28*28)
x_train = x_train.reshape((x_train.shape[0], 28 * 28))
x_test = x_test.reshape((x_test.shape[0], 28 * 28))

 
# One-hot encode the labels
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

 
# 2. Model Definition

# Define the model
model = Sequential()

# Add the input layer and the first hidden layer with 512 neurons and ReLU activation
model.add(Dense(512, activation='relu', input_shape=(28 * 28,)))

# Add a second hidden layer with 256 neurons and ReLU activation
model.add(Dense(256, activation='relu'))

# Add a third hidden layer with 128 neurons and ReLU activation
model.add(Dense(128, activation='relu'))

# Add the output layer with 10 neurons (one for each class) and softmax activation
model.add(Dense(10, activation='softmax'))

 
# 3. Compilation

# Compile the model
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])


# 4. Training
# Train the model
model.fit(x_train, y_train, epochs=10, batch_size=128, validation_split=0.2)


# 5. Evaluation
# Evaluate the model

test_loss, test_accuracy = model.evaluate(x_test, y_test)
print(f'Test accuracy: {test_accuracy}')

 
# 6. Prediction
# Predict on the test set

predictions = model.predict(x_test)
# Example: print the predicted and true labels for the first test image

print(f'Predicted label: {np.argmax(predictions[0])}, True label: {np.argmax(y_test[0])}')
